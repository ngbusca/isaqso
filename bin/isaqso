#!/usr/bin/env python

from os.path import dirname
import argparse
import numpy as np
import fitsio
from IPython.display import SVG
import scipy.misc
from isaqso import models
from keras.utils import plot_model
from keras.utils.vis_utils import model_to_dot
from keras.models import load_model

from isaqso import isabal 

parser = argparse.ArgumentParser()

parser.add_argument("--model", type = str, required=True)
parser.add_argument("--super-drq", type = str, required=False)
parser.add_argument("--truth", type = str, required=False)
parser.add_argument("--data", type = str, required=True,nargs="*")
parser.add_argument("--epochs", type = int, required=False, default = 5)
parser.add_argument("--batch", type = int, required=False, default = 256)
parser.add_argument("--ndata", type = int, required=False, default = None)
parser.add_argument("--reg", type = float, required=False, default = 0., help="L2 regularization")
parser.add_argument("--out", type = str, required=True)
parser.add_argument("--hist", type = str, required=False, default = None)
args = parser.parse_args()

sdrq={}
truth={}
if args.super_drq is not None:
    sdrq = isabal.read_sdrq(args.super_drq)
if args.truth is not None:
    truth = isabal.read_desi_truth(args.truth)

for t,v in truth.items():
    sdrq[t]=v

tids = None
for f in args.data:
    if tids is None:
        tids,X,Y,z,bal = isabal.read_data(f, sdrq)
    else:
        aux = isabal.read_data(f, sdrq)
        tids = np.concatenate((tids, aux[0]))
        X = np.vstack((X, aux[1]))
        Y = np.vstack((Y, aux[2]))
        z = np.concatenate((z, aux[3]))
        bal = np.concatenate((bal, aux[4]))
## sample weights for class, z, bal

if args.ndata is not None:
    X = X[:args.ndata,:]
    Y = Y[:args.ndata,:]
    z = z[:args.ndata]
    bal = bal[:args.ndata]

ndata = X.shape[0]
class_weight = {}
for i in range(Y.shape[1]):
    norm = Y[:,i].sum()
    class_weight[i]=1
    if norm > 0:
        class_weight[i]=ndata*1./norm

sample_weights_X = np.ones(ndata)
sample_weights_z = (Y.argmax(axis=1) == 2) | (Y.argmax(axis=1) == 3)
sample_weights_bal = (Y.argmax(axis=1) == 2) | (Y.argmax(axis=1) == 3)
print X.shape, Y.shape, z.shape, bal.shape
#try:
if True:
    print args.model
    model = getattr(models, args.model)(X[0,:,None].shape, classes = Y.shape[1], reg = args.reg)
    print "compiling model {}".format(args.model)
    model.compile(optimizer='adam', loss = ['categorical_crossentropy', 'mean_squared_error','binary_crossentropy'], metrics=['accuracy'])
#except:
#    print "loading model from {}".format(args.model)
#    model = load_model(args.model)

print "starting fit"
history = model.fit(X[:,:,None], [Y, z, bal], epochs = args.epochs, batch_size = args.batch, \
        sample_weight = [sample_weights_X, sample_weights_z, sample_weights_bal], class_weight = class_weight)

model.save(args.out)

model.summary()

plot_model(model, to_file='model.png')
SVG(model_to_dot(model).create(prog='dot', format='svg'))

if args.hist is not None:
    import os.path
    if os.path.isfile(args.hist):
        fout = fitsio.FITS(args.hist)
        cols = {}
 
        for c in fout[1].get_colnames():
            cols[c] = fout[1][c][:]
        for k,v in history.history.items():
            cols[k] = np.concatenate((cols[k],v))
        fout.close()
        fout = fitsio.FITS(args.hist,'rw',clobber=True)
        fout.write(cols)

    else:
        cols = []
        fout = fitsio.FITS(args.hist,'rw')
        for v in history.history.values():
            cols.append(np.array(v))
        fout.write(cols, names=history.history.keys())

    fout.close()
